"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = verify;
const purify_ts_1 = require("purify-ts");
const axios_1 = __importStar(require("axios"));
const pdf_text_reader_1 = require("pdf-text-reader");
const process_text_1 = require("./process-text/process-text");
async function verify(request) {
    const txnIdValidation = purify_ts_1.Either
        .encase(() => validateTxnId(request.transactionId))
        .mapLeft(() => ({ type: 'INVALID_TRANSACTION_ID' }));
    if (txnIdValidation.isLeft())
        return (0, purify_ts_1.Left)(txnIdValidation.extract());
    const accNoValidation = purify_ts_1.Either
        .encase(() => validateAccNo(request.accountNumberOfSenderOrReceiver))
        .mapLeft(() => ({ type: 'INVALID_ACCOUNT_NO' }));
    if (accNoValidation.isLeft())
        return (0, purify_ts_1.Left)(accNoValidation.extract());
    const txnId = txnIdValidation.unsafeCoerce();
    const accNo = accNoValidation.unsafeCoerce();
    const id = `${txnId}${accNo.substring(5)}`;
    try {
        const response = await axios_1.default.get(`${request.cbeVerificationUrl}/${id}`, {
            responseType: "blob",
            responseEncoding: "binary",
        });
        const pdfText = await (0, pdf_text_reader_1.readPdfText)({ data: response.data });
        return (0, purify_ts_1.Right)((0, process_text_1.processResultText)(pdfText));
    }
    catch (error) {
        if (error instanceof axios_1.AxiosError) {
            if (error.response) {
                return (0, purify_ts_1.Left)({ type: 'TRANSACTION_NOT_FOUND' });
            }
            else {
                return (0, purify_ts_1.Left)({ type: 'API_REQUEST_FAILED', message: error.message });
            }
        }
        else {
            return (0, purify_ts_1.Left)({ type: 'API_REQUEST_FAILED', message: `Unknown error: ${error}` });
        }
    }
}
const validateTxnId = (txnId) => {
    if (!txnId)
        throw 'Error: txnId is required!';
    if (!/^FT\w{10}$/.test(txnId.toString()))
        throw 'Error: Invalid txnId!';
    return txnId.toString();
};
const validateAccNo = (accNo) => {
    if (!accNo)
        throw 'Error: accNo is required!';
    if (!/^1000\d{9}$/.test(accNo.toString()))
        throw 'Error: Invalid accNo!';
    return accNo.toString();
};
//# sourceMappingURL=verify.js.map